from aiogram import types, Bot, Dispatcher
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.data import read_file, add_miners, save_file, add_thousands_separator
from aiogram.fsm.context import FSMContext
from utils.parsing import Data
from aiogram.fsm.state import State, StatesGroup

class Trade(StatesGroup):
    coins = State()







async def check_miner_info(callback_query: types.CallbackQuery):
    key = InlineKeyboardBuilder()

    key.button(text='–ö—É–ø–∏—Ç—å', callback_data=f"b{callback_query.data}")
    user_data = read_file('data/users.json')[str(callback_query.from_user.id)]
    miner_data = read_file('data/shop_items.json')
    miner = callback_query.data.split('_')[1]
    await callback_query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–π–Ω–µ—Ä: {miner}\n–¶–µ–Ω–∞: {add_thousands_separator(miner_data[miner]['price'])} b-cash\n–ú–æ—â–Ω–æ—Å—Ç—å: {miner_data[miner]['pow']} BC/15 –º–∏–Ω.", reply_markup=key.as_markup())
    

    

async def buy_miner(callback_query: types.CallbackQuery):
    user_data = read_file('data/users.json')
    miner_data = read_file('data/shop_items.json')
    miner = callback_query.data.split('b_')[1]

    if user_data[str(callback_query.from_user.id)]['Rbalance'] < miner_data[miner]['price']:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç " + str(add_thousands_separator(miner_data[miner]['price'] - user_data[str(callback_query.from_user.id)]['Rbalance'])) + " —Ä—É–±")
    else:
        user_data[str(callback_query.from_user.id)]['Rbalance'] -= miner_data[miner]['price']
        save_file('data/users.json', user_data)
        add_miners(callback_query.from_user.id, miner)
        await callback_query.answer("–í—ã –∫—É–ø–∏–ª–∏ " + miner + " –∑–∞ " + str(add_thousands_separator(miner_data[miner]['price'])) + " b-cash!\n–ö –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É —Ñ–∞—Ä–º—É –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å +" + str(miner_data[miner]['pow']))

async def trade_button(callback_query: types.CallbackQuery, state: FSMContext):
    key = InlineKeyboardBuilder()
    Bbalance = read_file('data/users.json')[str(callback_query.from_user.id)]['Bbalance']
    key.button(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
    await callback_query.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å\n\n–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {round(Bbalance, 8)} BebraCoin'–æ–≤", reply_markup=key.as_markup())
    await state.set_state(Trade.coins)


async def trade_coins(message: types.Message, state: FSMContext):
    data = read_file('data/users.json')
    key = InlineKeyboardBuilder()

    key.button(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
    
    if message.text.replace(".", "", 1).isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        Bbalance = data[str(message.from_user.id)]['Bbalance']
        Rbalance = data[str(message.from_user.id)]['Rbalance']
        try:
            amount = float(message.text)
            if amount > Bbalance:
                await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç " + str(add_thousands_separator(amount - Bbalance)) + " BebraCoin'–æ–≤")
            else:
                data[str(message.from_user.id)]['Rbalance'] += Data().rate * amount
                data[str(message.from_user.id)]['Bbalance'] -= amount
                save_file('data/users.json', data)
                await message.reply(f"–í—ã –æ–±–º–µ–Ω—è–ª–∏ {amount} BebraCoin'–æ–≤ –Ω–∞ {add_thousands_separator(Data().rate * amount)} b-cash")
                await state.clear()
        except ValueError:
            if int(amount) > Bbalance:
                await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç " + str(add_thousands_separator(int(amount) - Bbalance)) + " BebraCoin'–æ–≤")
            else:
                data[str(message.from_user.id)]['Rbalance'] += round(Data().rate * int(amount), 8)
                data[str(message.from_user.id)]['Bbalance'] -= int(amount)
                save_file('data/users.json', data)
                await message.reply(f"–í—ã –æ–±–º–µ–Ω—è–ª–∏ {amount} BebraCoin'–æ–≤ –Ω–∞ {add_thousands_separator(round(Data().rate * int(amount), 8))} b-cash")
                await state.clear()
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=key.as_markup())
            

async def cancel_button(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.delete()


async def all_user_miners(callback_query: types.CallbackQuery):
    key = InlineKeyboardBuilder()
    data = read_file('data/users.json')
    miners = data[str(callback_query.from_user.id)]['miners']
    for miner in miners:
        key.button(text=f"{miner} | {miners[miner]['count']}", callback_data='MI_' + miner)
    key.adjust(1)

    await callback_query.message.edit_text("üìù –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –º–∞—à–∏–Ω\n\n<i>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω</i>",parse_mode='HTML', reply_markup=key.as_markup())


async def all_user_prefixes(callback_query: types.CallbackQuery):
    key = InlineKeyboardBuilder()
    data = read_file('data/users.json')
    prefixes = data[str(callback_query.from_user.id)]['prefix']
    for prefix in prefixes:
        key.button(text=f"{prefix}", callback_data='PR_' + prefix)
    key.adjust(1)

    await callback_query.message.edit_text("üìù –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤",parse_mode='HTML', reply_markup=key.as_markup())


async def change_prefix(callback_query: types.CallbackQuery):
    data = read_file('data/users.json')
    prefix = callback_query.data.split('_')[1]
    data[str(callback_query.from_user.id)]['user_prefix'] = prefix
    save_file('data/users.json', data)
    await callback_query.message.edit_text(f"‚úÖ –¢–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–µ—Ñ–∏–∫—Å: {prefix}")


async def miner_info(callback_query: types.CallbackQuery):
    key = InlineKeyboardBuilder()

    key.button(text="–ù–∞–∑–∞–¥", callback_data="back_m")

    mdata = read_file("data/shop_items.json")
    udata = read_file("data/users.json")
    miner = callback_query.data.split('_')[1]
    await callback_query.message.edit_text(f"""
<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–π–Ω–µ—Ä–µ {miner}</b>

--------------------------------
–ù–∞–∑–≤–∞–Ω–∏–µ: {miner}
–ú–æ—â–Ω–æ—Å—Ç—å (1 —à—Ç—É–∫–∞): {mdata[miner]['pow']} BC/15 –º–∏–Ω 

–¶–µ–Ω–∞: {mdata[miner]['price']} b-cash
–ú–æ—â–Ω–æ—Å—Ç—å (–≤—Å–µ—Ö): {mdata[miner]['pow'] * udata[str(callback_query.from_user.id)]['miners'][miner]['count']} BC/15 –º–∏–Ω
–ö–æ–ª-–≤–æ –º–∞–π–Ω–µ—Ä–æ–≤: {udata[str(callback_query.from_user.id)]["miners"][miner]['count']}
                                       """, parse_mode='HTML', reply_markup=key.as_markup())
    


async def go_back(callback_query: types.CallbackQuery):
    choose = callback_query.data.split('_')[1]
    if choose == 'm':
        await all_user_miners(callback_query)