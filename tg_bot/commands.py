from aiogram import types, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils import data
from utils.data import read_file
from datetime import datetime, timedelta
from utils.data import add_thousands_separator, get_ability
from tg_bot.events import get_bebra_coins
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from utils.parsing import Data
from tg_bot.key import shop_btn, main_btn, ivent_shop

from apscheduler.schedulers.asyncio import AsyncIOScheduler

class Promo(StatesGroup):
    text = State()

async def start_command(message: types.Message):
    data.check_user(message.from_user.id)
    

    text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ <b>Bebra Miner</b>! 

ü§ñ –ú–∞–π–Ω–∏ –æ—Å–æ–±—ã–µ BebraCoin'—ã –∏ –ø–æ–∫—É–ø–∞–π –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞!


<i>‚ö†Ô∏è –í—Å–µ –ø–æ–∫—É–ø–∫–∏, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ —è–≤–ª—è—é—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏.
–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–∏—á–µ–≥–æ –æ–±—â–µ–≥–æ —Å –æ–±—ã—á–Ω—ã–º–∏ –º–∞–∏ÃÜ–Ω–µ—Ä–∞–º–∏ –∏ –º–∞–π–Ω–∏–Ω–≥–æ–º. –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–≤—ã–º, –∞ –Ω–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º.</i>

"""
    if message.chat.type == "private":
        await message.reply(text + "\n\nüëá –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ ", reply_markup=main_btn())
    else:
        await message.reply(text + "\n\nüëá –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤–≤–µ–¥–∏ –µ–µ –≤—Ä—É—á–Ω—É—é")


async def delete_panel(message: types.Message):
    await message.answer("–ü–∞–Ω–µ–ª—å —É–¥–∞–ª–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())


async def farm_command(message: types.Message, appscheduler: AsyncIOScheduler, bot: Bot):
    data.check_user(message.from_user.id)
    miners = read_file('data/users.json')[str(message.from_user.id)]['miners']
    count = 0
    money_per_15_min = 0

    for miner in miners:
        money_per_15_min += miners[miner]['pow'] * miners[miner]['count']
        count += miners[miner]['count']
    rouded_money = round(money_per_15_min, 5)
    time = 15
    if read_file('data/users.json')[str(message.from_user.id)]['user_prefix'] in read_file('data/items/prefixes.json'):
        ability = get_ability(message.from_user.id, read_file('data/users.json')[str(message.from_user.id)]['user_prefix'])
        if ability.startswith('add'):
            rouded_money += rouded_money * float(ability.split('_')[1]) / 100
            
        elif ability.startswith('speed'):
            time -= int(ability.split('_')[1])
    appscheduler.add_job(get_bebra_coins, trigger='interval', minutes=time, kwargs={'plus': rouded_money, 'chat_id': message.from_user.id})
    await message.reply(f"üìù –£ –≤–∞—Å {count} –º–∞–∏ÃÜ–Ω–µ—Ä(-–æ–≤).\n\nüí∏ –î–æ—Ö–æ–¥: {rouded_money} BCoins/{time} –º–∏–Ω—É—Ç.")

    


async def shop_command(message: types.Message):
    data.check_user(message.from_user.id)
    current = datetime.now()
    current_date = ("0" + str(current.day) if current.day < 10 else str(current.day)) + "." + ("0" + str(current.month) if current.month < 10 else str(current.month)) + "." + str(current.year)[2:]

    await message.reply(f"üõí –ú–∞–≥–∞–∑–∏–Ω –Ω–∞ {current_date}\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 21:00 –ø–æ –ú–°–ö. ", reply_markup=shop_btn())



async def trade_command(message: types.Message, bot: Bot):
    data.check_user(message.from_user.id)
    key = InlineKeyboardBuilder()
    rate_data = read_file('data/rate_info.json')
    key.button(text='–û–±–º–µ–Ω—è—Ç—å', callback_data='p2p')
    image = types.FSInputFile(path='data/graph.png')

    await bot.send_photo(chat_id=message.from_user.id, photo=image) 
    await message.reply(f"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ BebraCoin'—ã –Ω–∞ b-cash.\n\n–ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n1 BebraCoin = {add_thousands_separator(Data().rate)} b-cash.", reply_markup=key.as_markup())


async def ivent_command(message: types.Message):
    await message.reply("–ò–≤–µ–Ω—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω —Å–æ —Å–≤–æ–∏–º–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏\n\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤\n", reply_markup=ivent_shop())


async def promocode_command(message: types.Message, state: FSMContext):
    key = InlineKeyboardBuilder()
    key.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=key.as_markup())
    await state.set_state(Promo.text)


    