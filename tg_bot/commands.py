from aiogram import types, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils import data
from utils.data import read_file
from datetime import datetime, timedelta
from utils.data import add_thousands_separator
from tg_bot.events import get_bebra_coins
from utils.parsing import Data
from tg_bot.key import shop_btn
from apscheduler.schedulers.asyncio import AsyncIOScheduler

main_btn = [
        [types.KeyboardButton(text="üìà –§–µ—Ä–º–∞"), types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
        [types.KeyboardButton(text="üîÅ –û–±–º–µ–Ω–Ω–∏–∫"), types.KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω")],
        [types.KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")]
    ]

async def start_command(message: types.Message):
    data.check_user(message.from_user.id)
    

    text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ <b>Bebra Miner</b>! 

ü§ñ –ú–∞–π–Ω–∏ –æ—Å–æ–±—ã–µ BebraCoin'—ã –∏ –ø–æ–∫—É–ø–∞–π –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞!


<i>‚ö†Ô∏è –í—Å–µ –ø–æ–∫—É–ø–∫–∏, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ —è–≤–ª—è—é—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏.
–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–∏—á–µ–≥–æ –æ–±—â–µ–≥–æ —Å –æ–±—ã—á–Ω—ã–º–∏ –º–∞–∏ÃÜ–Ω–µ—Ä–∞–º–∏ –∏ –º–∞–π–Ω–∏–Ω–≥–æ–º. –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–≤—ã–º, –∞ –Ω–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º.</i>

"""
    if message.chat.type == "private":
        await message.answer(text + "\n\nüëá –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ ", reply_markup=types.ReplyKeyboardMarkup(keyboard=main_btn.append(), resize_keyboard=True))
    else:
        await message.reply(text + "\n\nüëá –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤–≤–µ–¥–∏ –µ–µ –≤—Ä—É—á–Ω—É—é")





async def profile_command(message: types.Message):
    key = InlineKeyboardBuilder()

    key.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    key.button(text='üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='promocodes')




    data.check_user(message.from_user.id)
    Rbalance = read_file('data/users.json')[str(message.from_user.id)]['Rbalance']
    Bbalance = read_file('data/users.json')[str(message.from_user.id)]['Bbalance']
    miners = read_file('data/users.json')[str(message.from_user.id)]['miners']
    count = 0
    money_per_15_min = 0

    for miner in miners:
        money_per_15_min += miners[miner]['pow'] * miners[miner]['count']
        count += miners[miner]['count']
    text = f"""
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å

üîë –õ–æ–≥–∏–Ω: @{message.from_user.username}
üÜî ID: {message.from_user.id}

üî∞ –ü—Ä–µ—Ñ–∏–∫—Å: {read_file('data/users.json')[str(message.from_user.id)]['user_prefix']}
üí∏ –ë–∞–ª–∞–Ω—Å b-cash: {add_thousands_separator(round(Rbalance, 8))}
ü™ô –ë–∞–ª–∞–Ω–∞—Å BebraCoin'–æ–≤: {add_thousands_separator(round(Bbalance, 8))}
üí™ –ú–æ—â–Ω–æ—Å—Ç—å —Ñ–µ—Ä–º—ã: {round(money_per_15_min, 8)} BC/15 –º–∏–Ω. (–ö–æ–ª-–≤–æ –º–∞—à–∏–Ω: {count})
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
"""
    if message.chat.type == "private":
        await message.answer(text, reply_markup=types.ReplyKeyboardMarkup(keyboard=main_btn, resize_keyboard=True))
    else:
        await message.reply(text)



    
# async def i_dont_know(message: types.Message, bot: Bot):
#     await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAMNZg7vy4TrMLA2Q5UfHuDtK5cIN4UAAjAAA9UIjTlQ-8E00w8ezjQE') 

async def delete_panel(message: types.Message):
    await message.answer("–ü–∞–Ω–µ–ª—å —É–¥–∞–ª–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())


async def farm_command(message: types.Message, appscheduler: AsyncIOScheduler, bot: Bot):
    data.check_user(message.from_user.id)
    miners = read_file('data/users.json')[str(message.from_user.id)]['miners']
    count = 0
    money_per_15_min = 0

    for miner in miners:
        money_per_15_min += miners[miner]['pow'] * miners[miner]['count']
        count += miners[miner]['count']
    await message.reply(f"–£ –≤–∞—Å {count} –º–∞–∏ÃÜ–Ω–µ—Ä(-–æ–≤).\n\n–î–æ—Ö–æ–¥: {round(money_per_15_min, 6)} BCoins/15 –º–∏–Ω—É—Ç.")

    appscheduler.add_job(get_bebra_coins, trigger='interval', minutes=15, kwargs={'plus': round(money_per_15_min, 6), 'chat_id': message.from_user.id})


async def shop_command(message: types.Message):
    data.check_user(message.from_user.id)
    current = datetime.now()
    current_date = ("0" + str(current.day) if current.day < 10 else str(current.day)) + "." + ("0" + str(current.month) if current.month < 10 else str(current.month)) + "." + str(current.year)[2:]

    await message.reply(f"–ú–∞–≥–∞–∑–∏–Ω –Ω–∞ {current_date}\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 21:00 –ø–æ –ú–°–ö. ", reply_markup=shop_btn())



async def trade_command(message: types.Message):
    data.check_user(message.from_user.id)
    key = InlineKeyboardBuilder()
    key.button(text='–û–±–º–µ–Ω—è—Ç—å', callback_data='p2p')
    await message.reply(f"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ BebraCoin'—ã –Ω–∞ b-cash.\n\n–ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n1 BebraCoin = {add_thousands_separator(Data().rate)} b-cash.", reply_markup=key.as_markup())


async def help_command(message: types.Message):
    await message.reply("–ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã/–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n\n–ù–∞–ø–∏—à–∏ @ArtizSQ\n–ö–∞–Ω–∞–ª: @bebra_miner_news")