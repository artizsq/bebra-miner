from aiogram import types, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils import data
from utils.data import read_file
from datetime import datetime, timedelta
from utils.data import add_thousands_separator
from tg_bot.events import get_bebra_coins

from aiogram import types, Bot, Dispatcher
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.data import read_file, add_miners, save_file, add_thousands_separator
from aiogram.fsm.context import FSMContext
from utils.parsing import Data
import json
from aiogram.fsm.state import State, StatesGroup

class Trade(StatesGroup):
    coins = State()


class Trader:
    async def trade_button(callback_query: types.CallbackQuery, state: FSMContext):
        key = InlineKeyboardBuilder()
        key.button(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        Bbalance = read_file('data/users.json')[str(callback_query.from_user.id)]['Bbalance']
        await callback_query.message.edit_text(f"üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å\n\nü™ô –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {round(Bbalance, 8)} BebraCoin'–æ–≤", reply_markup=key.as_markup())
        await state.set_state(Trade.coins)

    async def trade_coins(message: types.Message, state: FSMContext):
        data = read_file('data/users.json')

        key = InlineKeyboardBuilder()
        key.button(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')

        try:
            amount = float(message.text)
            if not isinstance(amount, float) or amount <= 0:
                await message.reply("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Ç–æ—á–∫—É.", reply_markup=key.as_markup())
            elif amount > data[str(message.from_user.id)]['Bbalance']:
                await message.reply("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç " + str(add_thousands_separator(amount - data[str(message.from_user.id)]['Bbalance'])) + " BebraCoin'–æ–≤")
            else:
                data[str(message.from_user.id)]['Rbalance'] += Data().rate * amount
                data[str(message.from_user.id)]['Bbalance'] -= amount
                save_file('data/users.json', data)
                await message.reply(f"‚úÖ –í—ã –æ–±–º–µ–Ω—è–ª–∏ {amount} BebraCoin'–æ–≤ –Ω–∞ {add_thousands_separator(Data().rate * amount)} b-cash")
                await state.clear()
        except ValueError:
            await message.reply("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=key.as_markup())
