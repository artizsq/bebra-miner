from aiogram import Bot, Dispatcher, F, filters, types
import asyncio
from utils.parsing import Data
from tg_bot.exceptions import IsAdmin, CheckUser, CheckIvent, IventShopChecker
from tg_bot.commands import (start_command, 
                             profile_command, 
                             delete_panel, 
                             farm_command,
                             shop_command,
                             trade_command,
                             help_command,
                             ivent_command)

from tg_bot.handlers import (check_miner_info, 
                             buy_miner, 
                             trade_button, 
                             cancel_button, 
                             trade_coins, 
                             Trade,
                             all_user_miners,
                             all_user_prefixes,
                             change_prefix,
                             miner_info,
                             go_back, buy_event_miner)

from tg_bot.admin_commands import (admin_panel,
                                    update_shop_admin,
                                    send_BD, Admin, 
                                    add_or_sub_balance, add_balance, 
                                    sub_balance, ban_user, ban_user_action, 
                                    actions_with_balance, update_rate_button)
import logging
from tg_bot.middlewares import SchedulerMiddleware
from tg_bot.events import update_current_shop, update_rate, update_event
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler


logging.basicConfig(level=logging.INFO)




async def main():
    data = Data()
    bot = Bot(token=data.TOKEN, parse_mode="HTML")
    dp = Dispatcher()
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(update_current_shop, trigger='cron', hour=21, minute=0, start_date=datetime.now(), kwargs={'bot': bot})
    scheduler.add_job(update_rate, trigger='interval', minutes=15, start_date=datetime.now(), kwargs={'bot': bot})
    scheduler.add_job(update_event, trigger='interval', hours=12, start_date=datetime.now(), kwargs={'bot': bot})

    
    # dp.message.register(i_dont_know, filters.Command('help'))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    dp.message.register(start_command, filters.Command("start"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile –∏ –∫–Ω–æ–ø–∫–∏ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
    dp.message.register(profile_command, filters.Command("profile"))
    dp.message.register(profile_command, F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /farm –∏ –∫–Ω–æ–ø–∫–∏ "üìà –§–µ—Ä–º–∞"
    dp.message.register(farm_command, F.text == "üìà –§–µ—Ä–º–∞")
    dp.message.register(farm_command, filters.Command("farm"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop –∏ –∫–Ω–æ–ø–∫–∏ "üõí –ú–∞–≥–∞–∑–∏–Ω"
    dp.message.register(shop_command, F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
    dp.message.register(shop_command, filters.Command("shop"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /trade –∏ –∫–Ω–æ–ø–∫–∏ "üîÅ –û–±–º–µ–Ω–Ω–∏–∫"
    dp.message.register(trade_command, F.text == "üîÅ –û–±–º–µ–Ω–Ω–∏–∫")
    dp.message.register(trade_command, filters.Command("trade"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –∏ –∫–Ω–æ–ø–∫–∏ "üÜò –ü–æ–º–æ—â—å"
    dp.message.register(help_command, F.text == "üÜò –ü–æ–º–æ—â—å")
    dp.message.register(help_command, filters.Command("help"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /event
    dp.message.register(ivent_command, F.text == "‚åõÔ∏è –ò–≤–µ–Ω—Ç", CheckIvent())
    dp.message.register(ivent_command, filters.Command("event"), CheckIvent())


    dp.message.register(trade_coins, Trade.coins)





    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –º–∞–≥–∞–∑–∏–Ω–∞ (–≤—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∫—É–ø–∫–∏)
    dp.callback_query.register(check_miner_info, F.data.startswith('_'), CheckUser())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –º–∞–∏ÃÜ–Ω–µ—Ä" –ø—Ä–∏ –∏–≤–µ–Ω—Ç–µ
    dp.callback_query.register(buy_event_miner, F.data.startswith('ev_'), CheckUser(), IventShopChecker())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å"
    dp.callback_query.register(buy_miner, F.data.startswith('b_'), CheckUser())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–º–µ–Ω—è—Ç—å"
    dp.callback_query.register(trade_button, F.data == "p2p", CheckUser())

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    dp.callback_query.register(cancel_button, F.data == "cancel", CheckUser())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–º–æ–∏ –º–∞–π–Ω–µ—Ä—ã"
    dp.callback_query.register(all_user_miners, F.data == "all_miners", CheckUser())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–º–æ–∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã"
    dp.callback_query.register(all_user_prefixes, F.data == "all_prefixes", CheckUser())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å"
    dp.callback_query.register(change_prefix, F.data.startswith('PR_'), CheckUser())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–∏ÃÜ–Ω–µ—Ä–µ"
    dp.callback_query.register(miner_info, F.data.startswith('MI_'), CheckUser())

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    dp.callback_query.register(go_back, F.data.startswith('back_'), CheckUser())


    # ---------------------------------- #
    dp.message.register(delete_panel, filters.Command("delete_panel"), IsAdmin())
    dp.message.register(admin_panel, filters.Command("panel"), IsAdmin())

    dp.callback_query.register(send_BD, F.data == "upload", IsAdmin())
    dp.callback_query.register(add_balance, F.data == "add_balance", IsAdmin())
    dp.callback_query.register(sub_balance, F.data == "sub_balance", IsAdmin())
    dp.callback_query.register(ban_user, F.data == "ban", IsAdmin())
    dp.message.register(actions_with_balance, Admin.user_id, IsAdmin())
    dp.message.register(add_or_sub_balance, Admin.balance, IsAdmin())
    dp.message.register(ban_user_action, Admin.user_id, IsAdmin())
    dp.callback_query.register(update_shop_admin, F.data == "update_shop", IsAdmin())
    dp.callback_query.register(update_rate_button, F.data == "rate", IsAdmin())


    

    
    


    # –ú–∏–¥–ª–≤–∞—Ä—ã (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
    dp.update.middleware(SchedulerMiddleware(scheduler))






    scheduler.start()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())